	.no $0200
; STACK			.eq $2
; PC_MAIN 		.eq	$3
; PC_SUB		.eq	$4
; PC_SUBSUB 	.eq $5
; R_CUR_PAGE	.eq	$6
; R_TABLE_PTR   .eq $A

A_L				.eq	$D	; higher byte: lower base address, lower byte: length
R_DRAW_WORK_PTR	.eq	$E
R_DRAW_SCR_PTR	.eq	$F

DRAW_ROAD
	GHI R_CUR_PAGE
	PHI R_DRAW_SCR_PTR
	LDI WORK_PAGE
	PHI R_DRAW_WORK_PTR
	GHI PC_SUB
	PHI R_TABLE_PTR
	LDI $02
DRAW_ROAD_L0
	STR STACK		; M(STACK) = y (counter)
	PLO R_DRAW_WORK_PTR	; points to LINE_DATA + y (LINE_DATA is assumed to be (WORK_PAGE << 8))
	SHL
	SHL
	SHL
	ADI $80
	PHI A_L			; lower base address in the screen
; draw right half
	LDN R_DRAW_WORK_PTR
	SDI $1E
	SEX STACK
	SM
	SM
	PLO A_L			; (A_L).0 = 30-line_data[y]-2y
	ANI $80
	BNZ DRAW_LEFT_0	; if line_data[y]+2y > 30, skip
	GLO A_L
	SMI $3F
	BNF DRAW_RIGHT_S0	; if (255 >=) 30-line_data[y]-2y >= 63, D := 30-line_data[y]-2y - 63
	LDI 00				; else, D := 0
DRAW_RIGHT_S0
	ADI $40
	PLO A_L				; (A_L).0 = 31-line_data[y]-2y
; right
	GHI A_L
	ADI $07
	PLO R_DRAW_SCR_PTR
	SEX R_DRAW_SCR_PTR
DRAW_RIGHT_L0
	GLO A_L
	SMI $08
	BNF DRAW_RIGHT_S1
	PLO A_L
	LDI $FF
	STXD
	BR DRAW_RIGHT_L0
DRAW_RIGHT_S1
	ADI $08
	BZ DRAW_LEFT_0
	ADI #BITPAT_RIGHT
	PLO R_TABLE_PTR
	LDN R_TABLE_PTR
	STR R_DRAW_SCR_PTR
DRAW_LEFT_0
	LDN R_DRAW_WORK_PTR
	ADI $1F
	SEX STACK
	SM
	SM
	PLO A_L
	ANI $80
	BNZ DRAW_DOT_0
	GLO A_L
	SMI $3F
	BNF DRAW_LEFT_S0
	LDI 00
DRAW_LEFT_S0
	ADI $40
	PLO A_L
; left
	GHI A_L
	PLO R_DRAW_SCR_PTR
	SEX R_DRAW_SCR_PTR
DRAW_LEFT_L0
	GLO A_L
	SMI $08
	BNF DRAW_LEFT_S1
	PLO A_L
	LDI $FF
	STR R_DRAW_SCR_PTR
	INC R_DRAW_SCR_PTR
	BR DRAW_LEFT_L0
DRAW_LEFT_S1
	ADI $08
	BZ DRAW_DOT_0
	ADI #BITPAT_LEFT
	PLO R_TABLE_PTR
	LDN R_TABLE_PTR
	STR R_DRAW_SCR_PTR
DRAW_DOT_0
	LDN STACK
	ADI #CENTER_DATA
	PLO R_DRAW_WORK_PTR
	LDN R_DRAW_WORK_PTR
	BZ DRAW_ROAD_FINAL
	LDN STACK
	PLO R_DRAW_WORK_PTR
	LDN R_DRAW_WORK_PTR
	ADI $20
	PLO A_L
	SMI $40
	BDF DRAW_ROAD_FINAL
; dot
	GHI A_L
	PLO R_DRAW_SCR_PTR
	GLO A_L
	SHR
	SHR
	SHR
	SEX STACK
	DEC STACK
	STR STACK
	GLO R_DRAW_SCR_PTR
	ADD
	INC STACK
	PLO R_DRAW_SCR_PTR
	GLO A_L
	ANI $07
	ADI #BITPAT_DOT
	PLO R_TABLE_PTR
	LDN R_TABLE_PTR
	SEX R_DRAW_SCR_PTR
	OR
	STR R_DRAW_SCR_PTR
DRAW_ROAD_FINAL
	LDN STACK
	SMI $0F
	BZ DRAW_DIST_SPEED
	ADI $10
	BR DRAW_ROAD_L0
DRAW_DIST_SPEED
	LDI /DRAW_BAR_SUBSUB_ENTRY
	PHI PC_SUBSUB
	LDI #DRAW_BAR_SUBSUB_ENTRY
	PLO PC_SUBSUB

	LDI $00			; line 0, leftmost byte
	PLO R_DRAW_SCR_PTR
	LDI #V_DIST_CAR
	PLO R_DRAW_WORK_PTR
	LDN R_DRAW_WORK_PTR
	SHR
	SHR
	ADI $01
	PLO A_L
	SEP PC_SUBSUB

	LDI $10			; line 2, leftmost byte
	PLO R_DRAW_SCR_PTR
	LDI #V_SPEED
	PLO R_DRAW_WORK_PTR
	LDN R_DRAW_WORK_PTR
	PLO A_L
	SEP PC_SUBSUB

	SEP PC_MAIN


; call with R_DRAW_SCR_PTR = start address, A_L = length
DRAW_BAR_SUBSUB_RET
	SEP PC_SUB
DRAW_BAR_SUBSUB_ENTRY
	SEX R_DRAW_SCR_PTR
DRAW_BAR_L0
	GLO A_L
	SMI $08
	BNF DRAW_BAR_S0
	PLO A_L
	LDI $FF
	STR R_DRAW_SCR_PTR
	INC R_DRAW_SCR_PTR
	BR DRAW_BAR_L0
DRAW_BAR_S0
	ADI $08
	BZ DRAW_BAR_SUBSUB_RET
	ADI BITPAT_LEFT
	PLO R_TABLE_PTR
	LDN R_TABLE_PTR
	STR R_DRAW_SCR_PTR
DRAW_BAR_EXIT
	BR DRAW_BAR_SUBSUB_RET


	.no $02E8
BITPAT_RIGHT
	.db $00, $01, $03, $07, $0F, $1F, $3F, $7F
BITPAT_LEFT
	.db $00, $80, $C0, $E0, $F0, $F8, $FC, $FE
BITPAT_DOT
	.db $80, $40, $20, $10, $08, $04, $02, $01
